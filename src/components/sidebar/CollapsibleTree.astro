---
import Collapsible from './Collapsible.astro'
import { Icon } from 'astro-icon/components'
import links from '@/utils/readLinks'

interface Props {
  title: string
  value: Record<string, unknown> | string
  keys?: string[]
}
let { title, value, keys } = Astro.props

keys ??= ['/cpt']
keys.push(title)

const link = typeof value === 'object' ? keys.join('/') : value
const doesLinkExist = links.includes(link) || typeof value !== 'object'

title = title.replace(/-\d+$/, '').replaceAll('-', ' ').replaceAll('_', ' ')

const isTree = typeof value === 'object'
value = isTree ? value : {}
---

<Collapsible
  class:list={['max-w-full break-words capitalize my-1', isTree ? 'tree' : '']}
>
  <p slot="label" class="flex items-center py-2 pl-2 pr-1 hover:bg-blue-300">
    <span class="hover:text-blue-950">
      {
        doesLinkExist ? (
          <a href={link} class="cursor-pointer hover:underline">
            {title}
          </a>
        ) : (
          <span>{title}</span>
        )
      }
    </span>
    <span class="tree-icon hidden flex-1 justify-end text-2xl">
      <Icon
        name="ic:sharp-arrow-drop-down"
        class="transition-transform cursor-pointer -rotate-90 text-zinc-600"
      />
    </span>
  </p>
  {
    Object.entries(value).map(([title, value]) => (
      <Astro.self {title} value={value as any} keys={[...keys]} />
    ))
  }
</Collapsible>

<style is:global>
  .tree > label .tree-icon {
    display: flex !important;
  }
  .tree > .collapsible-checkbox:checked ~ label .tree-icon > * {
    @apply rotate-0;
  }
  .tree > .collapsible-checkbox:checked ~ label > * > * {
    @apply bg-zinc-100;
  }
</style>
